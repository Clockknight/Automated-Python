
Q:

1. Write an assert statement that triggers an AssertionError if the variable spam is an integer less than 10.

A:

assert spam >= 10, 'Error'

Q:

2. Write an assert statement that triggers an AssertionError if the variables eggs and bacon contain strings that are the same as each other, even if their cases are different (that is, 'hello' and 'hello' are considered the same, and 'goodbye' and 'GOODbye' are also considered the same).

A:

assert breakfast == (eggs.lower() == bacon.lower()), 'Error'

Q:

3. Write an assert statement that always triggers an AssertionError.

A:

assert testAssertion == False, 'Error'

Q:

4. What are the two lines that your program must have in order to be able to call logging.debug()?

A:

import logging
logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s

Q:

5. What are the two lines that your program must have in order to have logging.debug() send a logging message to a file named programLog.txt?

A:

import logging
logging.basicConfig(filename='myProgramLog.txt', level=logging.DEBUG, format='
%(asctime)s - %(levelname)s - %(message)s')

Q:

6. What are the five logging levels?

A:

DEBUG, INFO, WARNING, ERROR, CRITICAL

Q:

7. What line of code can you add to disable all logging messages in your program?

A:

logging.disable()

Q:

8. Why is using logging messages better than using print() to display the same message?

A:

Because it is intended only for the developer to view, not the user.

Q:

9. What are the differences between the Step, Over, and Out buttons in the Debug Control window?

A:

Step moves to the next line of code
Over will move to the next line of code, working through any functions
Out will keep executing lines of code until the program returns from the current function

Q:

10. After you click Go in the Debug Control window, when will the debugger stop?

A:

Whenever it terminates or reaches a breakpoint

Q:

11. What is a breakpoint?

A:

A point in the code where the program is forced to stop

Q:

12. How do you set a breakpoint on a line of code in IDLE?

A:

Using *Set Breakpoint*
